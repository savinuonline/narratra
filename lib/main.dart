// lib/main.dart
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:frontend/pages/bookinfo.dart';
import 'package:frontend/services/firebase_service.dart';
import 'firebase_options.dart'; // Generated by FlutterFire CLI
import 'pages/genres_selection_page.dart';
import 'pages/home_screen.dart';
import 'models/user_model.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  // Uncomment to setup test data
  final firebaseService = FirebaseService();
  await firebaseService.setupTestData();

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // Create a dummy user (replace with real user info later)
  UserModel get dummyUser => UserModel(
    uid: 'GEhVv1eBKM4VugcxFlVN',
    displayName: 'Test User',
    selectedGenres: ['Personal Growth', 'Fiction'],
  );

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Audiobook App',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        useMaterial3: true,
        colorScheme: ColorScheme.fromSeed(
          seedColor: const Color(0xFF402e7a),
          brightness: Brightness.light,
          primary: const Color(0xFF402e7a),
          secondary: const Color(0xFF4c3bcf),
          background: const Color(0xFF3dc2ec),
        ),
        scaffoldBackgroundColor: const Color(0xff0c0c0c),
        appBarTheme: const AppBarTheme(
          backgroundColor: Color(0xFF402e7a),
          foregroundColor: Colors.white,
          elevation: 4,
        ),
      ),
      // Start on the Preferences page; user picks genres, then goes to Home
      initialRoute: '/preferences',
      routes: {
        '/preferences':
            (context) => const GenresSelectionPage(uid: 'GEhVv1eBKM4VugcxFlVN'),
        // Once the user finishes selecting genres, your code can do:
        // Navigator.pushReplacementNamed(context, '/home');
        '/home': (context) => HomeScreen(user: dummyUser),
        '/bookinfo': (context) {
          final args =
              ModalRoute.of(context)!.settings.arguments
                  as Map<String, dynamic>;
          return BookInfoPage(bookId: args['bookId']);
        },
      },
    );
  }
}
